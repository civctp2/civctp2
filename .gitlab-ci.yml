image: docker:stable

services:
  - docker:dind

before_script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

stages:
  - build
  - test
  - release

variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG

.build: &build
  stage: build
# tags:
#   - multicore
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  script:
    - docker pull $IMAGE_TAG:system-latest || true
    ## 1st stage build using system-latest for caching
    - docker build --pull
                   --cache-from $IMAGE_TAG:system-latest
                   --tag $IMAGE_TAG:system-latest
                   --target system
                   . |& tee -a build.log # pipe must not be started on a new line
    - docker push $IMAGE_TAG:system-latest
    ## 2nd stage build using builder-latest for caching
    - docker pull $IMAGE_TAG:builder-latest-${CI_JOB_NAME} || true
    - docker build --pull
                   --cache-from $IMAGE_TAG:system-latest
                   --cache-from $IMAGE_TAG:builder-latest-${CI_JOB_NAME}
                   --tag $IMAGE_TAG:builder-latest-${CI_JOB_NAME}
                   --build-arg BTYP=${CI_JOB_NAME}
                   --target builder 
                   . |& tee -a build.log # pipe must not be started on a new line
    - docker push $IMAGE_TAG:builder-latest-${CI_JOB_NAME}
    - mkdir -p deb/ # create artifacts folder
    - docker run --rm
                 --volume $(pwd)/debian/:/debian/
                 --volume $(pwd)/deb/:/deb/
                 --volume $(pwd)/tools/build-deb.sh:/tools/build-deb.sh:ro
                 $IMAGE_TAG:builder-latest-${CI_JOB_NAME}
                 tools/build-deb.sh ${CI_JOB_NAME} # create deb-package from pre-compiled files
    ## 3rd stage build using system-latest and builder-latest for caching
    - apk add --update --no-cache curl
    - 'curl -sS -f -L --header  "Private-Token: ${ARTIFACTKEY}" -o ctp2CD.zip "${CI_API_V4_URL}/projects/${CI_PROJECT_NAMESPACE}%2Fctp2CD/jobs/artifacts/master/download?job=ctp2CDpack"'
    - mkdir -p ctp2CD/
    - unzip ctp2CD.zip -d ctp2CD/
    - docker pull $IMAGE_TAG:test-${CI_JOB_NAME} || true
    - docker build --pull
                   --cache-from $IMAGE_TAG:system-latest
                   --cache-from $IMAGE_TAG:builder-latest-${CI_JOB_NAME}
                   --cache-from $IMAGE_TAG:test-${CI_JOB_NAME}
                   --tag $IMAGE_TAG:test-${CI_JOB_NAME}
                   --build-arg BTYP=${CI_JOB_NAME}
                   --target install
                   . |& tee -a build.log # pipe must not be started on a new line
    - docker push $IMAGE_TAG:test-${CI_JOB_NAME}
  retry: 2
  artifacts:
    when: always
    paths:
    - deb/*.deb
    - build.log

plain:
  <<: *build

debug:
  <<: *build

.test: &test
  stage: test
  dependencies: []
  image: registry.gitlab.com/lynxabraxas/dind-sikuli/master:latest
  artifacts:
    untracked: true
    when: always
  script:
    - export SHARED_PATH="$(dirname ${CI_PROJECT_DIR})/shared"
    - mkdir -p ${SHARED_PATH}/.X11-unix/
    - mkdir -p /tmp/.X11-unix/
    - mount --bind ${SHARED_PATH}/.X11-unix/ /tmp/.X11-unix/
    - export DISPLAY=:99.0
    - Xvfb $DISPLAY -screen 0 1280x1024x24 &
    - pidX=$!
    - sleep 3
    - BTYP=${CI_JOB_NAME%% *}
    - JOB=${CI_JOB_NAME##* }
    - echo "$BTYP $JOB"
    - docker pull $IMAGE_TAG:${CI_JOB_STAGE}-${BTYP}
    - echo $DOCKER_PARAMS
    - echo $CTP_PARAMS
    - mkdir -p $(pwd)/logs/ && chmod a+rw $(pwd)/logs/ # needs to be rw for diUser
    - XVFBtmp=${SHARED_PATH}/.X11-unix/ HOME=$(pwd) tools/run-DI.sh
             $DOCKER_PARAMS
             $IMAGE_TAG:${CI_JOB_STAGE}-${BTYP}
             ./ctp2 $CTP_PARAMS &
    - pidD=$!
    - java -cp "/opt/sikulixapi.jar:/opt/jython-standalone-2.7.1.jar" org.python.util.jython tests/${JOB}.sikuli/${JOB}.py
    - kill $pidD
    - kill $pidX
    - test -f ${JOB}.png
  retry: 2
  except:
    - /^debug-.*$/

plain start-game:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

debug start-game:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

plain new-game:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

debug new-game:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

plain load-game:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

debug load-game:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

plain name-game:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

debug name-game:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

plain play-game_build-city:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

debug play-game_build-city:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie"

plain load-sprite:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie runspriteeditor"

plain loop-sprite:
  <<: *test
  variables:
    CTP_PARAMS: "nointromovie runspriteeditor"

release:
  variables:
    GIT_STRATEGY: none
  stage: release
  dependencies: []
  script:
    - docker pull $IMAGE_TAG:test-plain
    - docker tag  $IMAGE_TAG:test-plain $IMAGE_TAG:latest
    - docker push $IMAGE_TAG:latest
    - docker tag  $IMAGE_TAG:latest $IMAGE_TAG:$CI_COMMIT_SHORT_SHA
    - docker push $IMAGE_TAG:$CI_COMMIT_SHORT_SHA
    - docker rmi $(docker images | awk -v IMG=$IMAGE_TAG '$1 ~ (IMG) && $2 ~ /[0-9a-f]{8}/' | tail -n +6) || true  # keep last 5 images: https://stackoverflow.com/questions/40891610/docker-remove-all-but-last-n-images#40892314
